{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","item","fetch","response","json","getUserPosts","userId","getPosts","getPostDetails","postId","PostsList","props","selectedUserId","selectedPostId","selectPost","useState","posts","setPosts","useEffect","then","className","map","post","title","type","onClick","id","getPostComments","addComment","newComment","method","headers","body","JSON","stringify","deleteComment","commentsId","NewCommentForm","onAdd","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","setPost","comments","setComments","isVisible","setVisible","length","comment","getUsers","App","users","setUsers","selectedUser","setSelectUser","setPostId","usersFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27ccfe76.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url:string, item = {}) => {\n  const response = await fetch(`${BASE_URL}/${url}`, item);\n\n  return response.json();\n};\n","import { request } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPosts = async () => {\n  return request('/posts');\n};\n\nexport const getPostDetails = async (postId: number) => {\n  return request(`/posts/:${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPostId: number;\n  selectPost: (postId :number) => void;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectedPostId, selectPost } = props;\n  const [posts, setPosts] = useState([] as Post[]);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      getPosts()\n        .then(response => setPosts(response));\n\n      return;\n    }\n\n    getUserPosts(selectedUserId)\n      .then(response => setPosts(response));\n  }, [selectedUserId]);\n\n  const handleChange = (id: number) => {\n    if (selectedPostId === id) {\n      selectPost(0);\n    } else {\n      selectPost(id);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleChange(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open' }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const addComment = async (newComment: Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const deleteComment = async (commentsId: number) => {\n  return request(`/comments/${commentsId}`, { method: 'DELETE' });\n};\n","import React, { FormEvent, useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  onAdd: (newComment: Partial<Comment>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, onAdd } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd({\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostDetails } from '../../api/posts';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState(null as Post | null);\n  const [comments, setComments] = useState([] as Comment[]);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(response => {\n        setPost(response);\n      });\n    getPostComments(selectedPostId)\n      .then(response => setComments(response));\n  }, [selectedPostId]);\n\n  const addNewComment = (newComment: Partial<Comment>) => {\n    addComment(newComment as Comment)\n      .then(() => getPostComments(selectedPostId))\n      .then(response => setComments(response));\n  };\n\n  const deleteCommentOnServer = (commentsId: number) => {\n    deleteComment(commentsId)\n      .then(() => getPostComments(selectedPostId))\n      .then(response => setComments(response));\n  };\n\n  const handleChange = () => {\n    setVisible(!isVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button type=\"button\" className=\"button\" onClick={handleChange}>\n          {isVisible\n            ? `Hide ${comments.length} comments`\n            : `Show ${comments.length} comments`}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {isVisible && (\n            <>\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteCommentOnServer(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            onAdd={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUsers = async () => {\n  return request('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState([] as User[]);\n  const [selectedUser, setSelectUser] = useState(0);\n  const [postId, setPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUser(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={handleChange}>\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUser}\n            selectedPostId={postId}\n            selectPost={setPostId}\n          />\n        </div>\n\n        {postId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={postId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}